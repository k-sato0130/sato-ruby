### 演算子・関数・変数の応用

## 「;」で一行で定義された関数
def add(a, b); a + b; end
p add(2, 3) #=> 5

## 組み込み定数
p STDIN #=> <IO:<STDIN>>
p STDOUT #=> #<IO:<STDOUT>>
p ARGV[0] #=> nil
p ENV['PATH']

## キーワード引数を用いたメソッドの定義
def add2(a:, b: 100)
  (a + b)
end
p add2(a: 1) #=> 101
p add2(a: 2, b: 3) #=> 5
  # キーワード引数に存在しない引数名を渡すとAgumenterrorになる。
  # add2(a: 2, c: 200) #=> ArgumentError

## キーワード引数に任意の引数を使用する。
def bar(a:, b: 100, **z)
  p z
  p a + b
end
bar(a: 2, c: 100, d: 200) #=> {:c=>100, :d=>200} 102

## ifの修飾子
a = 1 if true
p a #=> 1
  #条件が成立しない場合の変数宣言(へ安定結果に関わらず変数の宣言は行なわれる。)
  b = 3 if false
  p b #=> nil

## 条件演算子(条件式 ? 式1 : 式2)
  #条件式を評価し、成立する場合には式１を、成立しない場合には式２を評価して返す。
a = true ? 1 : 2
p a #=> 1
_num = 1
_num2 = 10
a = (_num > _num2) ? true : false
p a #=> false

## 論理演算子('&&',"||")を適用した式の評価値
  #論理演算子は最後に評価したオペランドの値を返す特徴を持っている。
  a = nil && 1
  a2 = 1 && 2
  p a #=> nil
  p a2 #=> 2
  a = 1 || 2
  p a #=> 1
    #論演算子の自己代入
    d = 2
    b = b || 1 #bが初期化していない(nil)場合に１を代入する
    p b #=> 1
    c ||= 1 #cが初期化していない(nil)場合に１を代入する。
    p c #=> 1
    d ||= 1
    p d #=> 2
