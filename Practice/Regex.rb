### 正規表現

## 正規表現の生成方法
p reg1 = /Ruby/ #=> /Ruby/
p reg2 = %r(Python) #=> /Python/
p reg3 = Regexp.new('Golang') #=> /Golang/

## マッチ方法
p reg1 =~ "Ruby is kinda great" #=> 0
p reg1 =~ "Java" #=> nil

##正規表現の組込変数
/bb/ =~ 'aabbcc'
p $' #=> 'cc' #マッチした部分より後の文字列
p $& #=> 'bb' #最後にマッチした文字列
p /^bb$/ =~ 'aabbcc' #=> nil

#選択
reg4 = /^(aa|bb)c$/
p reg4 =~ 'aac' #=> 0
p reg4 === 'bbc' #=> true
reg5 = /a[bcd]e[fg]h/
reg5 === "abegh" #=> true

#正規表現とオプション
p /a[1-5]v/ === 'a2v' #=> true
p /a[b-z]s/ === 'ags' #=> true
p /\d\w\D\s/ === '2dj s' #=> true #\Dは数字以外の文字
p /a*b/ === 'ab' #=> true # 0回以上の繰り返し
p /a+b/ === 'aab' #=> true # 1回以上の繰り返し
p /a{3}b/ === 'aaab' #=> true #{}カッコ内の数字の繰り返し
p /a{1,5}b/ === 'aaab' #=> true #{2,4} 2回以上4回以下

#正規表現の後方参照
/(.)(\d\d)+(.)/ =~"12345"
p $1 #=> 1
p $2  #=>"23"
p $& #=>"1234" #「」ではマッチした部分そのものの文字列を表す。
p $'  #=>"5" #「」ではマッチした文字列の後の文字を表す。

##* == === eql? equal?の違い
## 用語
# 1 同一性：同一のオブジェクトであるかどうか？（同じ値であっても、別々のオブzyくとであれば偽となる）
# 2 同値性：同一の値であるかどうか。（同一の値であれば別々のオブジェクトであっても真となる。）
# 3 所属性：所属関係にあるかどうか。同一性・同値性に関わらず所属関係にあれば真となる。）
# == : 2
# === : 3
# equal? : 1
